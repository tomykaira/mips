PROJECT_ROOT = `git rev-parse --show-toplevel`
COMPILER_SET = $(PROJECT_ROOT)/compiler_set

# min-camlのライブラリファイル
LIB_ML = $(COMPILER_SET)/lib_ml.ml

# アセンブリのライブラリファイル
LIB_ASM = $(COMPILER_SET)/lib_asm.s

MIN_CAML=BISECT_FILE=$(COMPILER_SET)/compiler/coverage $(COMPILER_SET)/compiler/min-caml
OPTION= -b -inline 150 

LINKER=groovy $(COMPILER_SET)/linker/linker.groovy

SIMULATOR=$(COMPILER_SET)/simulator/simulator -t
ASSEMBLER=$(COMPILER_SET)/assembler/assembler
CORE_RUNNER=$(PROJECT_ROOT)/core_runner/run_fpga
BYTE_FILE_GENERATOR=$(PROJECT_ROOT)/core_runner/byte_file_generator.rb

ARTIFACTS=*.bin *.s

# Get user-unique temporary file path
# $(call tmp filepath)
tmp = /tmp/$(basename $(1))_$(notdir $(HOME))

%.test: %.ocaml %.sim
	diff $*.ocaml $*.sim

%.test_core: %.sim %.core
	diff $*.sim $*.core

%.s: %.ml
	cat $(LIB_ML) $*.ml > $(call tmp,$*).ml
	$(MIN_CAML) $(OPTION) $(call tmp,$*)
	$(LINKER) $(LIB_ASM) $(call tmp,$*).s ${abspath $*.s}

%.bin: %.s
	$(ASSEMBLER) $*.s $*.bin

%.byte.bin: %.bin
	$(BYTE_FILE_GENERATOR) $*.bin

%.ans: %.ocaml %.sim
	cp $*.sim $*.ans
	cat $*.ans
	diff $*.ocaml $*.ans

%.sim: %.bin
	$(SIMULATOR) $*.bin > $*.sim

%.core: %.bin
	$(CORE_RUNNER) $*.bin > $*.core

%.ocaml: %.ml
	sed $*.ml -e 's/^(\*NOMINCAML \(.*\)\*)/\1/' > $(call tmp,$*).ml
	ocaml $(call tmp,$*).ml > $*.ocaml

clean:
	rm -f *.ocaml *.sim *.core *.log *.ppm $(ARTIFACTS)
