(*INPUT
256
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
0 231 37
1 189 0
16 170 0
21 177 0
33 188 0
55 197 0
0 59 211
0 82 244
25 149 255
65 184 255
100 205 255
140 218 253
155 227 255
153 228 255
133 235 255
119 238 255
99 249 255
86 255 238
80 254 177
105 255 97
202 255 90
247 255 66
255 235 47
253 204 22
255 158 0
242 91 0
227 18 0
255 55 178
241 112 255
211 167 255
155 110 255
47 143 255
*)
let cMap              = ref (Array.create 1 (0.0,0.0,0.0)) in
let cConf             = Array.create 1 256 in
let rec read_cMap_sub iter=
(
 let r=read_float () in
 let g=read_float () in
 let b=read_float () in
 !cMap.(iter) <- (r,g,b);
 if iter==(cConf.(0)-1) then ()
 else read_cMap_sub (iter + 1)
)
in

let read_cMap ()=
(
 cConf.(0) <- read_int ();
 cMap:=Array.make cConf.(0) (0.0,0.0,0.0);
 read_cMap_sub 0
)
in
read_cMap();
let rec print_tuple x =
  let (r, g, b) = !cMap.(x) in
  print_int5 r; print_int5 g; print_int5 b
in
let rec print_iter x =
  if x < 256 then
    (print_tuple x; print_iter (x + 1))
  else
    ()
in
print_iter 0
